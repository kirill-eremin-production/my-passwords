import { FC, useState, useEffect } from 'react'
import { Button } from '../Button/Button'
import {
    isBiometricSupported,
    getBiometricDisplayName,
    getAppleBiometricType,
    getCompatibilityInfo
} from '../../utils/webauthn'
import {
    hasBiometricCredentials,
    registerBiometric,
    authenticateWithBiometric
} from '../../api/biometric'

import styles from './BiometricButton.module.css'

export interface BiometricButtonProps {
    onSuccess: (masterPassword?: string) => void
    onError?: (error: string) => void
    masterPassword?: string // –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–∏–æ–º–µ—Ç—Ä–∏–∏
}

export const BiometricButton: FC<BiometricButtonProps> = ({
    onSuccess,
    onError,
    masterPassword
}) => {
    const [isSupported, setIsSupported] = useState(false)
    const [isLoading, setIsLoading] = useState(false)
    const [hasCredentials, setHasCredentials] = useState(false)
    const [biometricType, setBiometricType] = useState<'touch-id' | 'face-id' | 'unknown'>('unknown')
    const [compatibilityInfo, setCompatibilityInfo] = useState<any>(null)
    const [showDetails, setShowDetails] = useState(false)

    useEffect(() => {
        const checkSupport = async () => {
            const supported = await isBiometricSupported()
            const compInfo = await getCompatibilityInfo()
            
            setIsSupported(supported)
            setCompatibilityInfo(compInfo)
            
            if (supported) {
                setHasCredentials(await hasBiometricCredentials())
                setBiometricType(getAppleBiometricType())
            }
        }
        
        checkSupport()
    }, [])

    const handleBiometricAuth = async () => {
        console.log('üéØ handleBiometricAuth –≤—ã–∑–≤–∞–Ω')
        console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', { isSupported, hasCredentials, masterPassword: !!masterPassword })
        
        if (!isSupported) {
            console.log('‚ùå –ë–∏–æ–º–µ—Ç—Ä–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è')
            onError?.('–ë–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è')
            return
        }

        console.log('üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isLoading = true')
        setIsLoading(true)

        try {
            if (hasCredentials) {
                console.log('üîÑ –†–µ–∂–∏–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–µ—Å—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)')
                // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è - –ø–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å —Å —Å–µ—Ä–≤–µ—Ä–∞
                const result = await authenticateWithBiometric()
                if (result.success && result.masterPassword) {
                    onSuccess(result.masterPassword)
                } else {
                    onError?.('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å')
                }
            } else {
                console.log('üîÑ –†–µ–∂–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–Ω–µ—Ç —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)')
                // –ü–µ—Ä–≤–∏—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                if (!masterPassword) {
                    console.log('‚ùå –ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω')
                    onError?.('–ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–∏–æ–º–µ—Ç—Ä–∏–∏')
                    return
                }
                
                console.log('üîÑ –í—ã–∑—ã–≤–∞–µ–º registerBiometric...')
                const result = await registerBiometric('user', masterPassword)
                console.log('‚úÖ registerBiometric –∑–∞–≤–µ—Ä—à–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result)
                
                if (typeof result === 'number') {
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥–æ–≤
                    switch (result) {
                        case 403:
                            throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.')
                        case 400:
                            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–∏–æ–º–µ—Ç—Ä–∏–∏')
                        case 500:
                            throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–∏–æ–º–µ—Ç—Ä–∏–∏')
                        default:
                            throw new Error(`–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–∏–æ–º–µ—Ç—Ä–∏–∏ (–∫–æ–¥: ${result})`)
                    }
                }
                
                if (!result.success) {
                    throw new Error(result.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –±–∏–æ–º–µ—Ç—Ä–∏—é')
                }
                
                setHasCredentials(true)
                console.log('üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')
                onSuccess()
            }
        } catch (error) {
            console.error('‚ùå –û–®–ò–ë–ö–ê –≤ handleBiometricAuth:', error)
            const message = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'
            onError?.(message)
        } finally {
            console.log('üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isLoading = false')
            setIsLoading(false)
        }
    }

    const getBiometricIcon = () => {
        switch (biometricType) {
            case 'touch-id':
                return 'üëÜ' // Touch ID icon
            case 'face-id':
                return 'üòä' // Face ID icon
            default:
                return 'üîê' // Generic biometric icon
        }
    }

    const getButtonText = () => {
        const displayName = getBiometricDisplayName()
        return hasCredentials 
            ? `–í–æ–π—Ç–∏ —Å ${displayName}` 
            : `–ù–∞—Å—Ç—Ä–æ–∏—Ç—å ${displayName}`
    }

    if (!isSupported && !compatibilityInfo) {
        return null
    }

    if (!isSupported && compatibilityInfo) {
        return (
            <div className={styles.container}>
                <Button
                    fullWidth
                    theme="second"
                    onClick={() => setShowDetails(!showDetails)}
                    className={styles.unsupportedButton}
                >
                    <span className={styles.icon}>‚ö†Ô∏è</span>
                    <span>–ë–∏–æ–º–µ—Ç—Ä–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</span>
                </Button>
                
                {showDetails && (
                    <div className={styles.detailsPanel}>
                        <h4>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:</h4>
                        <ul>
                            <li>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {compatibilityInfo.device}</li>
                            <li>–ë—Ä–∞—É–∑–µ—Ä: {compatibilityInfo.browser.name} {compatibilityInfo.browser.version || ''}</li>
                            <li>HTTPS: {compatibilityInfo.https ? '‚úÖ' : '‚ùå'}</li>
                            <li>WebAuthn: {compatibilityInfo.webauthn ? '‚úÖ' : '‚ùå'}</li>
                            <li>–ë–∏–æ–º–µ—Ç—Ä–∏—è: {compatibilityInfo.platformAuthenticator ? '‚úÖ' : '‚ùå'}</li>
                        </ul>
                        
                        {compatibilityInfo.recommendations.length > 0 && (
                            <>
                                <h4>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h4>
                                <ul>
                                    {compatibilityInfo.recommendations.map((rec: string, index: number) => (
                                        <li key={index}>{rec}</li>
                                    ))}
                                </ul>
                            </>
                        )}
                    </div>
                )}
            </div>
        )
    }

    return (
        <div className={styles.container}>
            <Button
                fullWidth
                theme="second"
                isLoading={isLoading}
                onClick={handleBiometricAuth}
                className={styles.biometricButton}
            >
                <span className={styles.icon}>{getBiometricIcon()}</span>
                <span>{getButtonText()}</span>
            </Button>
            
            {compatibilityInfo && (
                <div className={styles.supportInfo}>
                    <small>
                        {compatibilityInfo.browser.name} –Ω–∞ {compatibilityInfo.device}
                        {!compatibilityInfo.browser.isSupported && ' (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞)'}
                    </small>
                </div>
            )}
        </div>
    )
}
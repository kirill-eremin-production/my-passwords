/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å IndexedDB –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º
 * –ó–∞—â–∏—â–∞–µ—Ç –æ—Ç XSS –∞—Ç–∞–∫ –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç localStorage
 */

interface SecureStorageItem {
  id: string;
  data: string;
  timestamp: number;
}

export class SecureStorage {
  private dbName = 'my-passwords-secure';
  private version = 1;
  private storeName = 'secure_store';
  private db: IDBDatabase | null = null;

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  private async openDB(): Promise<IDBDatabase> {
    if (this.db) {
      return this.db;
    }

    return new Promise((resolve, reject) => {
      const request = indexedDB.open(this.dbName, this.version);

      request.onerror = () => {
        reject(new Error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è IndexedDB'));
      };

      request.onsuccess = () => {
        this.db = request.result;
        resolve(this.db);
      };

      request.onupgradeneeded = (event) => {
        const db = (event.target as IDBOpenDBRequest).result;
        
        if (!db.objectStoreNames.contains(this.storeName)) {
          const store = db.createObjectStore(this.storeName, { keyPath: 'id' });
          store.createIndex('timestamp', 'timestamp', { unique: false });
        }
      };
    });
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–∑ deviceKey
   */
  private async deriveKey(deviceKey: string): Promise<CryptoKey> {
    const encoder = new TextEncoder();
    const keyMaterial = await window.crypto.subtle.importKey(
      'raw',
      encoder.encode(deviceKey),
      { name: 'PBKDF2' },
      false,
      ['deriveKey']
    );

    return window.crypto.subtle.deriveKey(
      {
        name: 'PBKDF2',
        salt: encoder.encode('my-passwords-salt-2024'),
        iterations: 100000,
        hash: 'SHA-256'
      },
      keyMaterial,
      { name: 'AES-GCM', length: 256 },
      false,
      ['encrypt', 'decrypt']
    );
  }

  /**
   * –®–∏—Ñ—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é Web Crypto API
   */
  private async encryptWithDeviceKey(data: string, deviceKey: string): Promise<string> {
    try {
      const key = await this.deriveKey(deviceKey);
      const encoder = new TextEncoder();
      
      const iv = window.crypto.getRandomValues(new Uint8Array(12));
      const encrypted = await window.crypto.subtle.encrypt(
        { name: 'AES-GCM', iv },
        key,
        encoder.encode(data)
      );

      return JSON.stringify({
        iv: Array.from(iv),
        data: Array.from(new Uint8Array(encrypted))
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ');
    }
  }

  /**
   * –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é Web Crypto API
   */
  private async decryptWithDeviceKey(encryptedData: string, deviceKey: string): Promise<string> {
    try {
      const key = await this.deriveKey(deviceKey);
      const decoder = new TextDecoder();
      
      const { iv, data } = JSON.parse(encryptedData);
      const decrypted = await window.crypto.subtle.decrypt(
        { name: 'AES-GCM', iv: new Uint8Array(iv) },
        key,
        new Uint8Array(data)
      );

      return decoder.decode(decrypted);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ');
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç device key –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Web Crypto API –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
   */
  private async generateDeviceKey(): Promise<string> {
    console.log('üîÑ generateDeviceKey: –Ω–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...');
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π seed –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ IndexedDB
    console.log('üîÑ –ü–æ–ª—É—á–∞–µ–º randomSeed...');
    let randomSeed = await this.getSecureRandomSeed();
    console.log('‚úÖ RandomSeed –ø–æ–ª—É—á–µ–Ω:', randomSeed.substring(0, 10) + '...');
    
    const characteristics = [
      navigator.userAgent,
      navigator.language,
      window.screen.width,
      window.screen.height,
      new Date().getTimezoneOffset(),
      navigator.hardwareConcurrency || 'unknown',
      randomSeed // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    ].join('|');
    console.log('‚úÖ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å–æ–±—Ä–∞–Ω—ã');

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Web Crypto API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–æ–≥–æ –∫–ª—é—á–∞
    try {
      console.log('üîÑ –°–æ–∑–¥–∞–µ–º —Ö–µ—à —á–µ—Ä–µ–∑ Web Crypto API...');
      const encoder = new TextEncoder();
      const data = encoder.encode(characteristics);
      
      // –°–æ–∑–¥–∞–µ–º —Ö–µ—à —Å –ø–æ–º–æ—â—å—é Web Crypto API
      const hashBuffer = await window.crypto.subtle.digest('SHA-256', data);
      const hashArray = Array.from(new Uint8Array(hashBuffer));
      const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
      
      const deviceKey = `device-key-${hashHex.substring(0, 16)}-2024`;
      console.log('‚úÖ DeviceKey —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ:', deviceKey.substring(0, 20) + '...');
      return deviceKey;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ device key, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', error);
      // Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      let hash = 0;
      for (let i = 0; i < characteristics.length; i++) {
        const char = characteristics.charCodeAt(i);
        hash = ((hash << 5) - hash) + char;
        hash = hash & hash;
      }
      const fallbackKey = `device-key-${Math.abs(hash)}-2024`;
      console.log('‚úÖ Fallback deviceKey —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:', fallbackKey);
      return fallbackKey;
    }
  }

  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π seed –∏–∑ IndexedDB
   */
  private async getSecureRandomSeed(): Promise<string> {
    const SEED_KEY = 'device-random-seed';
    
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π seed –∏–∑ IndexedDB –ë–ï–ó —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
      // —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
      const existingSeed = await this.getRawData(SEED_KEY);
      if (existingSeed) {
        return existingSeed;
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–∏–π seed
      const randomArray = new Uint32Array(4);
      window.crypto.getRandomValues(randomArray);
      const newSeed = Array.from(randomArray).join('-');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ IndexedDB –ë–ï–ó —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è seed)
      await this.storeRawData(SEED_KEY, newSeed);
      
      return newSeed;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º seed:', error);
      // Fallback: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π seed (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è)
      const randomArray = new Uint32Array(4);
      window.crypto.getRandomValues(randomArray);
      return Array.from(randomArray).join('-');
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ IndexedDB –ë–ï–ó —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω—É–∂–¥)
   */
  private async storeRawData(key: string, data: string): Promise<void> {
    const db = await this.openDB();
    const transaction = db.transaction([this.storeName], 'readwrite');
    const store = transaction.objectStore(this.storeName);
    
    const item: SecureStorageItem = {
      id: key,
      data: data, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –±–µ–∑ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
      timestamp: Date.now()
    };

    await new Promise<void>((resolve, reject) => {
      const request = store.put(item);
      request.onsuccess = () => resolve();
      request.onerror = () => reject(new Error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ IndexedDB'));
    });
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ IndexedDB –ë–ï–ó —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω—É–∂–¥)
   */
  private async getRawData(key: string): Promise<string | null> {
    try {
      const db = await this.openDB();
      const transaction = db.transaction([this.storeName], 'readonly');
      const store = transaction.objectStore(this.storeName);

      const item = await new Promise<SecureStorageItem | null>((resolve, reject) => {
        const request = store.get(key);
        request.onsuccess = () => resolve(request.result || null);
        request.onerror = () => reject(new Error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ IndexedDB'));
      });

      return item ? item.data : null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ raw –¥–∞–Ω–Ω—ã—Ö:', error);
      return null;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ IndexedDB
   */
  async storeEncryptedData(key: string, data: string): Promise<void> {
    try {
      console.log('üîÑ SecureStorage.storeEncryptedData: –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –∫–ª—é—á–∞:', key);
      
      console.log('üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º deviceKey...');
      const deviceKey = await this.generateDeviceKey();
      console.log('‚úÖ DeviceKey —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
      
      console.log('üîÑ –®–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ...');
      const doubleEncrypted = await this.encryptWithDeviceKey(data, deviceKey);
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã');
      
      console.log('üîÑ –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
      const db = await this.openDB();
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞');
      
      console.log('üîÑ –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...');
      const transaction = db.transaction([this.storeName], 'readwrite');
      const store = transaction.objectStore(this.storeName);
      console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞');
      
      const item: SecureStorageItem = {
        id: key,
        data: doubleEncrypted,
        timestamp: Date.now()
      };
      console.log('üîÑ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ IndexedDB...');

      await new Promise<void>((resolve, reject) => {
        const request = store.put(item);
        request.onsuccess = () => {
          console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ IndexedDB');
          resolve();
        };
        request.onerror = () => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ IndexedDB:', request.error);
          reject(new Error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ IndexedDB'));
        };
      });
      
      console.log('üéâ SecureStorage.storeEncryptedData: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå SecureStorage.storeEncryptedData: –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ IndexedDB
   */
  async getEncryptedData(key: string): Promise<string | null> {
    try {
      const db = await this.openDB();
      const transaction = db.transaction([this.storeName], 'readonly');
      const store = transaction.objectStore(this.storeName);

      const item = await new Promise<SecureStorageItem | null>((resolve, reject) => {
        const request = store.get(key);
        request.onsuccess = () => resolve(request.result || null);
        request.onerror = () => reject(new Error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ IndexedDB'));
      });

      if (!item) {
        return null;
      }

      const deviceKey = await this.generateDeviceKey();
      return await this.decryptWithDeviceKey(item.data, deviceKey);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ SecureStorage:', error);
      return null;
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ IndexedDB
   */
  async removeData(key: string): Promise<void> {
    try {
      const db = await this.openDB();
      const transaction = db.transaction([this.storeName], 'readwrite');
      const store = transaction.objectStore(this.storeName);

      await new Promise<void>((resolve, reject) => {
        const request = store.delete(key);
        request.onsuccess = () => resolve();
        request.onerror = () => reject(new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ IndexedDB'));
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ SecureStorage:', error);
      throw error;
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
   */
  async clearAll(): Promise<void> {
    try {
      const db = await this.openDB();
      const transaction = db.transaction([this.storeName], 'readwrite');
      const store = transaction.objectStore(this.storeName);

      await new Promise<void>((resolve, reject) => {
        const request = store.clear();
        request.onsuccess = () => resolve();
        request.onerror = () => reject(new Error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ IndexedDB'));
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ SecureStorage:', error);
      throw error;
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ (—Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
   */
  async cleanupOldData(maxAgeMs: number = 30 * 24 * 60 * 60 * 1000): Promise<void> {
    try {
      const db = await this.openDB();
      const transaction = db.transaction([this.storeName], 'readwrite');
      const store = transaction.objectStore(this.storeName);
      const index = store.index('timestamp');

      const cutoffTime = Date.now() - maxAgeMs;
      const range = IDBKeyRange.upperBound(cutoffTime);

      await new Promise<void>((resolve, reject) => {
        const request = index.openCursor(range);
        request.onsuccess = (event) => {
          const cursor = (event.target as IDBRequest).result;
          if (cursor) {
            cursor.delete();
            cursor.continue();
          } else {
            resolve();
          }
        };
        request.onerror = () => reject(new Error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö'));
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –µ–¥–∏–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
export const secureStorage = new SecureStorage();
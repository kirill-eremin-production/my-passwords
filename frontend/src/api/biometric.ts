import { StoredCredential } from '../types/webauthn'

import { secureStorage } from '../utils/secureStorage'
import {
    arrayBufferToBase64,
    base64ToArrayBuffer,
    generateChallenge,
    generateUserId,
    isPlatformAuthenticatorAvailable,
    isWebAuthnSupported,
} from '../utils/webauthn'

import {
    decryptMasterPasswordLocally,
    encryptMasterPasswordLocally,
} from '../encryption/keyDerivation'

import { authenticateWithBiometric as authenticateBiometricAPI } from './biometricAuthenticate'
import { registerBiometric as registerBiometricAPI } from './biometricRegister'
import { getBiometricChallenge } from './getBiometricChallenge'

const STORAGE_KEY = 'biometric_credentials'
const MASTER_PASSWORD_STORAGE_KEY = 'biometric_master_passwords'

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
 */
const saveCredentials = async (
    credentials: StoredCredential[]
): Promise<void> => {
    try {
        console.log('üîÑ saveCredentials: –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ credentials...')
        await secureStorage.storeEncryptedData(
            STORAGE_KEY,
            JSON.stringify(credentials)
        )
        console.log('‚úÖ saveCredentials: —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ')
    } catch (error) {
        console.error(
            '‚ùå saveCredentials: –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:',
            error
        )
        throw error
    }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª–∏ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
 */
const saveMasterPasswords = async (
    masterPasswords: Record<string, string>
): Promise<void> => {
    try {
        console.log(
            'üîÑ saveMasterPasswords: –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª–µ–π...'
        )
        await secureStorage.storeEncryptedData(
            MASTER_PASSWORD_STORAGE_KEY,
            JSON.stringify(masterPasswords)
        )
        console.log('‚úÖ saveMasterPasswords: —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ')
    } catch (error) {
        console.error(
            '‚ùå saveMasterPasswords: –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª–µ–π:',
            error
        )
        throw error
    }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª–∏ –∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
 */
const loadMasterPasswords = async (): Promise<Record<string, string>> => {
    try {
        const stored = await secureStorage.getEncryptedData(
            MASTER_PASSWORD_STORAGE_KEY
        )
        return stored ? JSON.parse(stored) : {}
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª–µ–π:', error)
        return {}
    }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
 */
const loadCredentials = async (): Promise<StoredCredential[]> => {
    try {
        console.log('üîÑ loadCredentials: –∑–∞–≥—Ä—É–∂–∞–µ–º credentials...')
        const stored = await secureStorage.getEncryptedData(STORAGE_KEY)
        const result = stored ? JSON.parse(stored) : []
        console.log('‚úÖ loadCredentials: –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', result)
        return result
    } catch (error) {
        console.error(
            '‚ùå loadCredentials: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:',
            error
        )
        return []
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ª–∏ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
export const hasBiometricCredentials = async (): Promise<boolean> => {
    const credentials = await loadCredentials()
    return credentials.length > 0
}

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª–µ–º
 */
export const registerBiometric = async (
    username: string = 'user',
    masterPassword?: string
): Promise<{ success: boolean; message?: string } | number> => {
    console.log('üöÄ –°—Ç–∞—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–∏–æ–º–µ—Ç—Ä–∏–∏')

    if (!isWebAuthnSupported()) {
        console.error('‚ùå WebAuthn –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è')
        throw new Error('WebAuthn –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è')
    }
    console.log('‚úÖ WebAuthn –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è')

    const platformAuthAvailable = await isPlatformAuthenticatorAvailable()
    console.log(
        'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞:',
        platformAuthAvailable
    )

    if (!platformAuthAvailable) {
        console.error('‚ùå –ü–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
        throw new Error('–ü–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
    }
    console.log('‚úÖ –ü–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω')

    try {
        console.log(
            'üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –±–∏–æ–º–µ—Ç—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:',
            username
        )

        const challenge = generateChallenge()
        const userId = generateUserId()

        console.log('‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã challenge –∏ userId')

        const registrationOptions: PublicKeyCredentialCreationOptions = {
            challenge,
            rp: {
                name: 'My Passwords',
                id: 'local.passwords.keremin.ru',
            },
            user: {
                id: userId,
                name: username,
                displayName: username,
            },
            pubKeyCredParams: [
                { type: 'public-key', alg: -7 }, // ES256
                { type: 'public-key', alg: -257 }, // RS256
            ],
            authenticatorSelection: {
                authenticatorAttachment: 'platform',
                userVerification: 'required',
                requireResidentKey: false,
            },
            timeout: 60000,
            attestation: 'none',
        }

        console.log('‚úÖ –°–æ–∑–¥–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', registrationOptions)
        console.log('üîÑ –í—ã–∑—ã–≤–∞–µ–º navigator.credentials.create()...')

        const credential = (await navigator.credentials.create({
            publicKey: registrationOptions,
        })) as PublicKeyCredential

        console.log('‚úÖ Credential —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:', credential)

        if (!credential) {
            console.error('‚ùå Credential –Ω–µ —Å–æ–∑–¥–∞–Ω')
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
        }

        console.log('üîÑ –ü–æ–ª—É—á–∞–µ–º response –∏–∑ credential...')
        const response = credential.response as AuthenticatorAttestationResponse
        console.log('‚úÖ Response –ø–æ–ª—É—á–µ–Ω:', response)

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞–ª—å–Ω–æ
        console.log('üîÑ –°–æ–∑–¥–∞–µ–º storedCredential...')
        const storedCredential: StoredCredential = {
            id: credential.id,
            publicKey: arrayBufferToBase64(credential.rawId),
            counter: 0,
            createdAt: new Date().toISOString(),
        }
        console.log('‚úÖ storedCredential —Å–æ–∑–¥–∞–Ω:', storedCredential)

        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ credentials...')
        const existingCredentials = await loadCredentials()
        console.log(
            '‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ credentials –∑–∞–≥—Ä—É–∂–µ–Ω—ã:',
            existingCredentials
        )

        const updatedCredentials = [...existingCredentials, storedCredential]
        console.log('üîÑ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ credentials...')
        await saveCredentials(updatedCredentials)
        console.log('‚úÖ Credentials —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')

        // –ï—Å–ª–∏ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –ø–µ—Ä–µ–¥–∞–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ
        if (masterPassword) {
            console.log('üîÑ –®–∏—Ñ—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å...')
            const encryptedMasterPassword = encryptMasterPasswordLocally(
                masterPassword,
                credential.id
            )
            console.log('‚úÖ –ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω')

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            const masterPasswords = await loadMasterPasswords()
            masterPasswords[credential.id] = encryptedMasterPassword
            await saveMasterPasswords(masterPasswords)
            console.log('‚úÖ –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–ë–ï–ó –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è!)
        console.log('üîÑ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...')
        const registrationData = {
            credentialId: credential.id,
            publicKey: arrayBufferToBase64(credential.rawId),
            authenticatorData: arrayBufferToBase64(
                response.getAuthenticatorData()
            ),
            clientDataJSON: arrayBufferToBase64(response.clientDataJSON),
            attestationObject: arrayBufferToBase64(response.attestationObject),
            // masterPassword –£–î–ê–õ–ï–ù –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!
        }
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã:', registrationData)

        console.log('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä...')
        const result = await registerBiometricAPI(registrationData)
        console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω:', result)

        if (typeof result === 'number') {
            return result // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏
        }

        if (!result.success) {
            return result // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –æ—à–∏–±–∫–æ–π
        }

        console.log('üéâ –ë–∏–æ–º–µ—Ç—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞')
        return { success: true, message: '–ë–∏–æ–º–µ—Ç—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞' }
    } catch (error) {
        console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–∏–æ–º–µ—Ç—Ä–∏–∏:', error)
        console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
            name: error instanceof Error ? error.name : 'Unknown',
            message: error instanceof Error ? error.message : String(error),
            stack: error instanceof Error ? error.stack : undefined,
        })
        throw error
    }
}

/**
 * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
 * –ü–æ–ª—É—á–∞–µ—Ç –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è (–ë–ï–ó —Å–µ—Ä–≤–µ—Ä–∞!)
 */
export const authenticateWithBiometric = async (): Promise<{
    success: boolean
    masterPassword?: string
}> => {
    if (!isWebAuthnSupported()) {
        throw new Error('WebAuthn –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è')
    }

    if (!(await isPlatformAuthenticatorAvailable())) {
        throw new Error('–ü–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
    }

    const credentials = await loadCredentials()
    if (credentials.length === 0) {
        throw new Error('–ë–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
    }

    try {
        console.log('üîÑ –ü–æ–ª—É—á–∞–µ–º challenge —Å —Å–µ—Ä–≤–µ—Ä–∞...')
        const challengeResponse = await getBiometricChallenge()

        if (typeof challengeResponse === 'number') {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è challenge: ${challengeResponse}`)
        }

        if (!challengeResponse.success) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å challenge —Å —Å–µ—Ä–≤–µ—Ä–∞')
        }

        console.log('‚úÖ Challenge –ø–æ–ª—É—á–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞')
        const challenge = base64ToArrayBuffer(challengeResponse.challenge)

        const authenticationOptions: PublicKeyCredentialRequestOptions = {
            challenge,
            allowCredentials: credentials.map((cred) => ({
                type: 'public-key' as const,
                id: base64ToArrayBuffer(cred.publicKey), // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π publicKey –∫–∞–∫ id
            })),
            timeout: 60000,
            userVerification: 'required',
        }

        console.log('üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º WebAuthn –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é...')
        const assertion = (await navigator.credentials.get({
            publicKey: authenticationOptions,
        })) as PublicKeyCredential

        console.log('‚úÖ WebAuthn –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞')

        if (!assertion) {
            throw new Error('–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å')
        }

        // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        const masterPasswords = await loadMasterPasswords()
        const encryptedMasterPassword = masterPasswords[assertion.id]

        if (!encryptedMasterPassword) {
            throw new Error(
                '–ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–π –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –∑–∞–ø–∏—Å–∏'
            )
        }

        // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –ª–æ–∫–∞–ª—å–Ω–æ
        const masterPassword = decryptMasterPasswordLocally(
            encryptedMasterPassword,
            assertion.id
        )

        // –ü—Ä–∏–≤–æ–¥–∏–º —Ç–∏–ø response –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É
        const response = assertion.response as AuthenticatorAssertionResponse

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏ (–ë–ï–ó –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è!)
        const authenticationData = {
            credentialId: assertion.id,
            authenticatorData: arrayBufferToBase64(response.authenticatorData),
            clientDataJSON: arrayBufferToBase64(response.clientDataJSON),
            signature: arrayBufferToBase64(response.signature),
            userHandle: response.userHandle
                ? arrayBufferToBase64(response.userHandle)
                : undefined,
        }

        const result = await authenticateBiometricAPI(authenticationData)

        if (typeof result === 'number') {
            throw new Error(`–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${result}`)
        }

        if (!result.success) {
            throw new Error(
                result.message || '–û—à–∏–±–∫–∞ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'
            )
        }

        return {
            success: true,
            masterPassword: masterPassword, // –ü–æ–ª—É—á–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–µ —Å —Å–µ—Ä–≤–µ—Ä–∞!
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error)
        throw error
    }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª–∏
 */
export const clearBiometricCredentials = async (): Promise<void> => {
    try {
        await secureStorage.removeData(STORAGE_KEY)
        await secureStorage.removeData(MASTER_PASSWORD_STORAGE_KEY)
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error)
        throw error
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
export const getBiometricCredentialsInfo = async (): Promise<{
    count: number
    lastCreated?: string
}> => {
    const credentials = await loadCredentials()
    const lastCreated =
        credentials.length > 0
            ? credentials[credentials.length - 1].createdAt
            : undefined

    return {
        count: credentials.length,
        lastCreated,
    }
}

import { Request, Response } from "express";
import { BiometricAuthenticationRequest } from "../../types/biometric";
import {
  getBiometricCredentialById,
  getChallengeBySessionId,
  removeChallenge,
  updateBiometricCredentialCounter
} from "../../biometricStore";
import { storeSession } from "../../sessionsStore";
import { generateSessionId } from "../../middlewares/authorization/utils";
import {
  verifyWebAuthnSignature,
  validateWebAuthnClientData,
  extractCounterFromAuthenticatorData,
  getExpectedOrigin
} from "../../utils/webauthn";

/**
 * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç WebAuthn assertion –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
 */
export async function authenticateWithBiometric(req: Request, res: Response) {
  const authData: BiometricAuthenticationRequest = req.body.data;
  
  if (!authData) {
    res.status(400).json({ error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏" });
    return;
  }

  const { credentialId, authenticatorData, clientDataJSON, signature } = authData;

  if (!credentialId || !authenticatorData || !clientDataJSON || !signature) {
    res.status(400).json({ error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è" });
    return;
  }

  try {
    // –ù–∞—Ö–æ–¥–∏–º –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const credential = getBiometricCredentialById(credentialId);
    
    if (!credential) {
      res.status(404).json({ error: "–ë–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" });
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º challenge –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
    const sessionId = req.cookies?.sessionId;
    console.log('üîç –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è - sessionId –∏–∑ cookies:', sessionId);
    
    if (!sessionId) {
      console.log('‚ùå sessionId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      res.status(401).json({ error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç sessionId" });
      return;
    }

    const challengeData = getChallengeBySessionId(sessionId);
    console.log('üîç Challenge –¥–ª—è —Å–µ—Å—Å–∏–∏:', challengeData);
    
    if (!challengeData) {
      console.log('‚ùå Challenge –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏:', sessionId);
      res.status(400).json({ error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç challenge –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏" });
      return;
    }

    const expectedOrigin = getExpectedOrigin();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ WebAuthn
    console.log('üîç –í–∞–ª–∏–¥–∏—Ä—É–µ–º clientData —Å challenge:', challengeData.challenge);
    const clientDataValidation = validateWebAuthnClientData(
      clientDataJSON,
      challengeData.challenge,
      expectedOrigin
    );
    
    if (!clientDataValidation.isValid) {
      console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è clientData –Ω–µ—É—Å–ø–µ—à–Ω–∞:', clientDataValidation.error);
      res.status(400).json({ error: clientDataValidation.error });
      return;
    }
    console.log('‚úÖ clientData –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');

    // –ò–∑–≤–ª–µ–∫–∞–µ–º counter –∏–∑ authenticatorData –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ replay –∞—Ç–∞–∫
    const newCounter = extractCounterFromAuthenticatorData(authenticatorData);
    console.log('üîç Counter –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:');
    console.log('  - newCounter –∏–∑ authenticatorData:', newCounter);
    console.log('  - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π counter –≤ credential:', credential.counter);
    
    if (newCounter === -1) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è counter');
      res.status(400).json({ error: "–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è counter –∏–∑ authenticatorData" });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ counter –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç replay –∞—Ç–∞–∫
    // –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è credential newCounter –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–µ–Ω credential.counter
    if (newCounter < credential.counter) {
      console.warn(`‚ùå –í–æ–∑–º–æ–∂–Ω–∞—è replay –∞—Ç–∞–∫–∞: –Ω–æ–≤—ã–π counter (${newCounter}) < —Å—Ç–∞—Ä–æ–≥–æ (${credential.counter}) –¥–ª—è credential ${credentialId}`);
      res.status(400).json({ error: "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–∞—è replay –∞—Ç–∞–∫–∞" });
      return;
    }
    
    if (newCounter === credential.counter) {
      console.log('‚ö†Ô∏è Counter –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤');
    } else {
      console.log('‚úÖ Counter —É–≤–µ–ª–∏—á–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    }

    // –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê WEBAUTHN –ü–û–î–ü–ò–°–ò
    try {
      const verificationResult = await verifyWebAuthnSignature(
        credentialId,
        authenticatorData,
        clientDataJSON,
        signature,
        challengeData.challenge,
        credential,
        expectedOrigin
      );

      if (!verificationResult.verified) {
        console.error("WebAuthn signature verification failed:", verificationResult);
        res.status(403).json({ error: "–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å WebAuthn" });
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º counter –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
      updateBiometricCredentialCounter(credentialId, verificationResult.authenticationInfo.newCounter);

    } catch (verificationError) {
      console.error("–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ WebAuthn:", verificationError);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏ WebAuthn" });
      return;
    }

    // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π challenge
    removeChallenge(sessionId);

    // –ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –±–æ–ª—å—à–µ –ù–ï —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!
    // –¢–µ–ø–µ—Ä—å –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ.

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∞–ª–∏–¥–Ω—É—é —Å–µ—Å—Å–∏—é
    const newSessionId = generateSessionId();
    const newSession = {
      sessionId: newSessionId,
      code: null,
      valid: true,
      time: Date.now()
    };

    storeSession(newSession);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie —Å –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–µ–π
    res.cookie("sessionId", newSessionId, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'strict'
    });

    res.status(200).json({
      success: true,
      sessionId: newSessionId,
      valid: true,
      // masterPassword —É–¥–∞–ª–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ!
      message: "–ë–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞"
    });

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏" });
  }
}
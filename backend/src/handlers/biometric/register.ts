import { Request, Response } from "express";
import { verifyRegistrationResponse } from '@simplewebauthn/server';
import type { VerifyRegistrationResponseOpts } from '@simplewebauthn/server';
import { getSessionFromReq } from "../../middlewares/authorization/utils";
import { BiometricRegistrationRequest } from "../../types/biometric";
import { storeBiometricCredential } from "../../biometricStore";
import { getExpectedOrigin } from "../../utils/webauthn";

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–µ —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª–µ–º
 * –¢—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
 */
export async function registerBiometric(req: Request, res: Response) {
  const session = getSessionFromReq(req);
  
  console.log('üîç –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–∏–æ–º–µ—Ç—Ä–∏–∏ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏:', {
    sessionExists: !!session,
    sessionValid: session?.valid,
    sessionId: session?.sessionId
  });
  
  let currentSession = session;
  
  // –ï—Å–ª–∏ –Ω–µ—Ç —Å–µ—Å—Å–∏–∏ –≤–æ–æ–±—â–µ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∞–ª–∏–¥–Ω—É—é —Å–µ—Å—Å–∏—é
  // –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª —á–µ—Ä–µ–∑ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å
  if (!session) {
    console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∞–ª–∏–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–∏–æ–º–µ—Ç—Ä–∏–∏');
    const { createNewSession } = require("../../middlewares/authorization/utils");
    const newSessionId = createNewSession();
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∞–ª–∏–¥–Ω—É—é —Å–µ—Å—Å–∏—é
    const newSessionData = {
      sessionId: newSessionId,
      code: null,
      valid: true,
      time: Date.now()
    };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –≤–∞–ª–∏–¥–Ω—É—é
    const { storeSession } = require("../../sessionsStore");
    storeSession(newSessionData);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie —Å –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–µ–π
    res.cookie("sessionId", newSessionId, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'strict'
    });
    
    currentSession = newSessionData;
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≤–∞–ª–∏–¥–Ω–∞—è —Å–µ—Å—Å–∏—è:', newSessionId);
  }

  const registrationData: BiometricRegistrationRequest = req.body.data;
  
  if (!registrationData) {
    res.status(400).json({
      success: false,
      message: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
    });
    return;
  }

  const { credentialId, publicKey, authenticatorData, clientDataJSON, attestationObject } = registrationData;

  if (!credentialId || !attestationObject || !clientDataJSON) {
    res.status(400).json({
      success: false,
      message: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è"
    });
    return;
  }

  try {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç base64url –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    const toBase64url = (base64: string): string => {
      return base64
        .replace(/\+/g, '-')
        .replace(/\//g, '_')
        .replace(/=/g, '');
    };

    const expectedOrigin = getExpectedOrigin();
    const expectedRPID = process.env.WEBAUTHN_RP_ID || 'local.passwords.keremin.ru';

    // –ü–æ–ª—É—á–∞–µ–º challenge –∏–∑ clientDataJSON –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const clientData = JSON.parse(Buffer.from(clientDataJSON, 'base64').toString());
    const challengeFromClient = clientData.challenge;
    
    console.log('üîç –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - challenge –∏–∑ clientData:', challengeFromClient);

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const verification: VerifyRegistrationResponseOpts = {
      response: {
        id: toBase64url(credentialId),
        rawId: toBase64url(credentialId),
        response: {
          attestationObject: toBase64url(attestationObject),
          clientDataJSON: toBase64url(clientDataJSON),
        },
        type: 'public-key',
        clientExtensionResults: {},
      },
      expectedChallenge: toBase64url(challengeFromClient), // –ò—Å–ø–æ–ª—å–∑—É–µ–º challenge –∏–∑ clientData
      expectedOrigin,
      expectedRPID,
      requireUserVerification: true,
    };

    console.log('üîÑ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å @simplewebauthn/server...');
    const verificationResult = await verifyRegistrationResponse(verification);

    if (!verificationResult.verified) {
      console.error('‚ùå –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–æ—à–ª–∞:', verificationResult);
      res.status(400).json({
        success: false,
        message: "–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–∏–æ–º–µ—Ç—Ä–∏–∏"
      });
      return;
    }

    console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å COSE –ø—É–±–ª–∏—á–Ω—ã–º –∫–ª—é—á–æ–º
    const biometricCredential = {
      id: credentialId,
      publicKey: Buffer.from(verificationResult.registrationInfo!.credential.publicKey).toString('base64'),
      counter: verificationResult.registrationInfo!.credential.counter,
      createdAt: new Date().toISOString(),
      sessionId: currentSession!.sessionId,
      userAgent: req.headers["user-agent"]
    };

    console.log('üîÑ –°–æ—Ö—Ä–∞–Ω—è–µ–º credential —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º COSE –ø—É–±–ª–∏—á–Ω—ã–º –∫–ª—é—á–æ–º...');
    storeBiometricCredential(biometricCredential);

    res.status(200).json({
      success: true,
      message: "–ë–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã"
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:", error);
    res.status(500).json({
      success: false,
      message: `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–∏–æ–º–µ—Ç—Ä–∏–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
    });
  }
}
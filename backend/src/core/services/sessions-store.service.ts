import { Injectable } from '@nestjs/common';
import { randomBytes } from 'crypto';
import { SessionsFileStoreService, SessionData } from './sessions-file-store.service';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º API
interface Session {
  id: string;
  valid: boolean;
  createdAt: number;
  lastAccessedAt: number;
  code?: string | null;
}

@Injectable()
export class SessionsStoreService {
  private readonly SESSION_TIMEOUT = 60 * 60 * 1000; // 1 —á–∞—Å (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å 24)

  constructor(private readonly fileStore: SessionsFileStoreService) {}

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
   */
  createSession(): string {
    const randomId = randomBytes(32).toString('hex');
    const timestamp = Date.now().toString(36);
    const sessionId = `${timestamp}-${randomId}`; // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç!
    
    const sessionData: SessionData = {
      sessionId,
      code: null,
      valid: false,
      time: Date.now(),
    };
    
    this.fileStore.saveSession(sessionId, sessionData);
    return sessionId;
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å–µ—Å—Å–∏—é
   */
  validateSession(sessionId: string): void {
    const sessionData = this.fileStore.getSession(sessionId);
    if (sessionData) {
      sessionData.valid = true;
      sessionData.time = Date.now();
      this.fileStore.saveSession(sessionId, sessionData);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ ID (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   */
  getSession(sessionId: string): Session | undefined {
    const sessionData = this.fileStore.getSession(sessionId);
    if (!sessionData) {
      return undefined;
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    return {
      id: sessionData.sessionId,
      valid: sessionData.valid,
      createdAt: sessionData.time,
      lastAccessedAt: sessionData.time,
      code: sessionData.code,
    };
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —Å–µ—Å—Å–∏—é
   */
  removeSession(sessionId: string): void {
    this.fileStore.removeSession(sessionId);
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
   */
  removeExpiredSessions(): void {
    this.fileStore.removeExpiredSessions(this.SESSION_TIMEOUT);
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è —Å–µ—Å—Å–∏–∏
   */
  updateSessionCode(sessionId: string, code: string): void {
    const sessionData = this.fileStore.getSession(sessionId);
    if (sessionData) {
      sessionData.code = code;
      sessionData.time = Date.now();
      this.fileStore.saveSession(sessionId, sessionData);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è —Å–µ—Å—Å–∏–∏
   */
  getSessionCode(sessionId: string): string | null | undefined {
    const sessionData = this.fileStore.getSession(sessionId);
    return sessionData?.code;
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è —Å–µ—Å—Å–∏–∏
   */
  validateSessionCode(sessionId: string, inputCode: string): boolean {
    const sessionData = this.fileStore.getSession(sessionId);
    if (sessionData && sessionData.code === inputCode) {
      sessionData.valid = true;
      sessionData.code = null; // –û—á–∏—â–∞–µ–º –∫–æ–¥ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      sessionData.time = Date.now();
      this.fileStore.saveSession(sessionId, sessionData);
      return true;
    }
    return false;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
   */
  getActiveSessions(): Session[] {
    const sessions = this.fileStore.getAllSessions();
    return Object.values(sessions).map(sessionData => ({
      id: sessionData.sessionId,
      valid: sessionData.valid,
      createdAt: sessionData.time,
      lastAccessedAt: sessionData.time,
      code: sessionData.code,
    }));
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
let sessionsStoreInstance: SessionsStoreService;

export function prepareSessionsStore() {
  // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç–∞—è, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ DI
  console.log('üîÑ Sessions store –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ dependency injection');
}

export function removeExpiredSessionsFromSessionStore() {
  if (sessionsStoreInstance) {
    sessionsStoreInstance.removeExpiredSessions();
  }
}

export function getSessionsStore(): SessionsStoreService {
  return sessionsStoreInstance;
}

export function setSessionsStoreInstance(instance: SessionsStoreService) {
  sessionsStoreInstance = instance;
}
import { Injectable } from '@nestjs/common';
import { randomBytes } from 'crypto';
import { BiometricCredential, WebAuthnChallenge } from '../../types/biometric';
import { BiometricFileStoreService, BiometricCredentialStore, ChallengeData } from './biometric-file-store.service';

@Injectable()
export class BiometricStoreService {
  private readonly CHALLENGE_TIMEOUT = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

  constructor(private readonly fileStore: BiometricFileStoreService) {}

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π challenge –¥–ª—è –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  createChallenge(): string {
    const challenge = randomBytes(32).toString('base64url');
    const challengeData: ChallengeData = {
      challenge,
      createdAt: Date.now(),
    };
    
    this.fileStore.saveChallenge(challenge, challengeData);
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ challenges
    this.cleanupExpiredChallenges();
    
    return challenge;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å challenge
   */
  isValidChallenge(challenge: string): boolean {
    const challengeData = this.fileStore.getChallenge(challenge);
    if (!challengeData) {
      return false;
    }

    const now = Date.now();
    if (now - challengeData.createdAt > this.CHALLENGE_TIMEOUT) {
      this.fileStore.removeChallenge(challenge);
      return false;
    }

    return true;
  }

  /**
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç challenge (—É–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
   */
  useChallenge(challenge: string): boolean {
    if (this.isValidChallenge(challenge)) {
      this.fileStore.removeChallenge(challenge);
      return true;
    }
    return false;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
   */
  saveCredential(credentialId: string, credential: Omit<BiometricCredentialStore, 'id' | 'createdAt'>): void {
    this.fileStore.saveCredential(credentialId, credential);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
   */
  getCredential(credentialId: string): BiometricCredentialStore | undefined {
    return this.fileStore.getCredential(credentialId);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ credentials
   */
  getAllCredentials(): BiometricCredentialStore[] {
    return this.fileStore.getAllCredentials();
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫ –¥–ª—è credential
   */
  updateCredentialCounter(credentialId: string, newCounter: number): boolean {
    return this.fileStore.updateCredentialCounter(credentialId, newCounter);
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç credential
   */
  removeCredential(credentialId: string): boolean {
    return this.fileStore.removeCredential(credentialId);
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ challenges
   */
  private cleanupExpiredChallenges(): void {
    this.fileStore.removeExpiredChallenges(this.CHALLENGE_TIMEOUT);
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç challenge –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ sessionId (–¥–ª—è WebAuthn)
   */
  storeChallenge(challengeData: WebAuthnChallenge): void {
    this.fileStore.saveSessionChallenge(challengeData.sessionId, challengeData);
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ challenges
    this.cleanupExpiredSessionChallenges();
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç challenge –ø–æ sessionId
   */
  getChallengeBySessionId(sessionId: string): WebAuthnChallenge | undefined {
    const challengeData = this.fileStore.getSessionChallenge(sessionId);
    if (!challengeData) {
      return undefined;
    }

    const now = Date.now();
    if (now - challengeData.createdAt > this.CHALLENGE_TIMEOUT) {
      this.fileStore.removeSessionChallenge(sessionId);
      return undefined;
    }

    return challengeData;
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç challenge –ø–æ sessionId
   */
  removeChallenge(sessionId: string): boolean {
    return this.fileStore.removeSessionChallenge(sessionId);
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π)
   */
  storeBiometricCredential(credential: BiometricCredential): void {
    const storeCredential: Omit<BiometricCredentialStore, 'id' | 'createdAt'> = {
      publicKey: credential.publicKey,
      counter: credential.counter,
      credentialDeviceType: undefined,
      credentialBackedUp: undefined,
      transports: undefined,
      sessionId: credential.sessionId,
      userAgent: credential.userAgent,
    };
    
    this.fileStore.saveCredential(credential.id, storeCredential);
    console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è credential: ${credential.id}`);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ ID (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
   */
  getBiometricCredentialById(credentialId: string): BiometricCredential | undefined {
    const storeCredential = this.fileStore.getCredential(credentialId);
    if (!storeCredential || !storeCredential.sessionId) {
      return undefined;
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    return {
      id: storeCredential.id,
      publicKey: storeCredential.publicKey,
      counter: storeCredential.counter,
      createdAt: new Date(storeCredential.createdAt).toISOString(),
      sessionId: storeCredential.sessionId,
      userAgent: storeCredential.userAgent,
    };
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫ –¥–ª—è credential (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
   */
  updateBiometricCredentialCounter(credentialId: string, newCounter: number): boolean {
    return this.fileStore.updateCredentialCounter(credentialId, newCounter);
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ session challenges
   */
  private cleanupExpiredSessionChallenges(): void {
    this.fileStore.removeExpiredSessionChallenges(this.CHALLENGE_TIMEOUT);
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
   */
  prepareBiometricStore(): void {
    console.log('üîê –ë–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö challenges
    setInterval(() => {
      this.cleanupExpiredChallenges();
      this.cleanupExpiredSessionChallenges();
    }, 60 * 1000); // –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
let biometricStoreInstance: BiometricStoreService;

export function prepareBiometricStore() {
  // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç–∞—è, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ DI
  console.log('üîÑ Biometric store –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ dependency injection');
}

export function getBiometricStore(): BiometricStoreService {
  return biometricStoreInstance;
}

export function setBiometricStoreInstance(instance: BiometricStoreService) {
  biometricStoreInstance = instance;
}
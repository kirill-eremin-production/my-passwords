import { createCipher, createDecipher, randomBytes } from 'crypto';
import { readFileSync, writeFileSync, existsSync, mkdirSync } from 'fs';
import { resolve } from 'path';

/**
 * –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ñ–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å AES-256-CBC
 * –ó–∞—â–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ –¥–∏—Å–∫–µ –æ—Ç –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
 */
export class EncryptedFileStore {
  private encryptionKey: string;
  
  constructor() {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    this.encryptionKey = process.env.FILE_ENCRYPTION_KEY || 'default-key-change-me-in-production';
    
    if (this.encryptionKey === 'default-key-change-me-in-production') {
      console.warn('‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FILE_ENCRYPTION_KEY –≤ .env');
    }
  }

  /**
   * –®–∏—Ñ—Ä—É–µ—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
   */
  writeEncrypted(filePath: string, data: string): void {
    try {
      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const dirPath = resolve(filePath, '..');
      if (!existsSync(dirPath)) {
        mkdirSync(dirPath, { recursive: true });
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å–æ–ª—å –∏ IV
      const salt = randomBytes(32);
      const iv = randomBytes(16);
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–æ–ª—è –∏ —Å–æ–ª–∏
      const crypto = require('crypto');
      const key = crypto.pbkdf2Sync(this.encryptionKey, salt, 100000, 32, 'sha256');
      
      // –®–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
      const cipher = crypto.createCipher('aes-256-cbc', key);
      cipher.setAutoPadding(true);
      
      let encrypted = cipher.update(data, 'utf8', 'base64');
      encrypted += cipher.final('base64');
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ–ª—å, IV –∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const encryptedData = {
        salt: salt.toString('base64'),
        iv: iv.toString('base64'),
        data: encrypted,
        version: '1.0'
      };
      
      const encryptedJson = JSON.stringify(encryptedData);
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å/–ø–∏—Å–∞—Ç—å)
      writeFileSync(filePath, encryptedJson, { 
        encoding: 'utf8', 
        mode: 0o600  // rw-------
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª');
    }
  }

  /**
   * –ß–∏—Ç–∞–µ—Ç –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
   */
  readEncrypted(filePath: string): string {
    try {
      if (!existsSync(filePath)) {
        return '';  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      }

      const encryptedJson = readFileSync(filePath, { encoding: 'utf8' });
      
      // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON (–Ω–æ–≤—ã–π –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
      let encryptedData;
      try {
        encryptedData = JSON.parse(encryptedJson);
      } catch (parseError) {
        // –ï—Å–ª–∏ –Ω–µ JSON, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ —Å—Ç–∞—Ä—ã–π –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        console.warn('‚ö†Ô∏è –§–∞–π–ª –Ω–µ –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å');
        return encryptedJson;
      }

      if (!encryptedData.salt || !encryptedData.iv || !encryptedData.data) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞');
      }

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–ª—å –∏ IV
      const salt = Buffer.from(encryptedData.salt, 'base64');
      const iv = Buffer.from(encryptedData.iv, 'base64');
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–æ–ª—è –∏ —Å–æ–ª–∏
      const crypto = require('crypto');
      const key = crypto.pbkdf2Sync(this.encryptionKey, salt, 100000, 32, 'sha256');
      
      // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      const decipher = crypto.createDecipher('aes-256-cbc', key);
      let decrypted = decipher.update(encryptedData.data, 'base64', 'utf8');
      decrypted += decipher.final('utf8');
      
      return decrypted;
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª');
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º
   */
  isEncrypted(filePath: string): boolean {
    try {
      if (!existsSync(filePath)) {
        return false;
      }

      const content = readFileSync(filePath, { encoding: 'utf8' });
      const parsed = JSON.parse(content);
      
      return parsed.salt && parsed.iv && parsed.data && parsed.version;
    } catch (error) {
      return false;  // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON, —Ç–æ –Ω–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω
    }
  }

  /**
   * –ú–∏–≥—Ä–∏—Ä—É–µ—Ç –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
   */
  migrateToEncrypted(filePath: string): void {
    try {
      if (this.isEncrypted(filePath)) {
        console.log(`‚úÖ –§–∞–π–ª ${filePath} —É–∂–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω`);
        return;
      }

      console.log(`üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞ ${filePath} –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç...`);
      
      // –ß–∏—Ç–∞–µ–º –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const plainData = readFileSync(filePath, { encoding: 'utf8' });
      
      // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
      const backupPath = filePath + '.backup.' + Date.now();
      writeFileSync(backupPath, plainData, { encoding: 'utf8' });
      console.log(`üìù –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: ${backupPath}`);
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ
      this.writeEncrypted(filePath, plainData);
      
      console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è ${filePath}`);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞:', error);
      throw error;
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
   */
  validateEncryptionKey(): boolean {
    if (!this.encryptionKey || this.encryptionKey.length < 16) {
      console.error('‚ùå –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 16 —Å–∏–º–≤–æ–ª–æ–≤)');
      return false;
    }
    
    if (this.encryptionKey === 'default-key-change-me-in-production') {
      console.error('‚ùå –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è!');
      return false;
    }
    
    return true;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –µ–¥–∏–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
export const encryptedStore = new EncryptedFileStore();
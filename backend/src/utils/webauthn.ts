import { verifyAuthenticationResponse } from '@simplewebauthn/server';
import type { VerifyAuthenticationResponseOpts } from '@simplewebauthn/server';
import { createHash } from 'crypto';

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç counter –∏–∑ authenticatorData
 * Counter –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–∞–π—Ç–∞—Ö 33-36 authenticatorData
 */
export function extractCounterFromAuthenticatorData(authenticatorData: string): number {
  try {
    const buffer = Buffer.from(authenticatorData, 'base64');
    
    // Counter –∑–∞–Ω–∏–º–∞–µ—Ç 4 –±–∞–π—Ç–∞ –Ω–∞—á–∏–Ω–∞—è —Å –ø–æ–∑–∏—Ü–∏–∏ 33
    if (buffer.length < 37) {
      console.error('authenticatorData —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è counter');
      return -1;
    }
    
    // –ß–∏—Ç–∞–µ–º 4 –±–∞–π—Ç–∞ –∫–∞–∫ big-endian unsigned integer
    const counter = buffer.readUInt32BE(33);
    
    console.log(`üîç –ò–∑–≤–ª–µ—á–µ–Ω counter: ${counter} –∏–∑ authenticatorData –¥–ª–∏–Ω–æ–π ${buffer.length} –±–∞–π—Ç`);
    return counter;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è counter –∏–∑ authenticatorData:', error);
    return -1;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–π origin –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */
export function getExpectedOrigin(): string {
  const isProduction = process.env.NODE_ENV === 'production';
  
  if (isProduction) {
    return process.env.WEBAUTHN_ORIGIN || 'https://passwords.keremin.ru';
  } else {
    return process.env.WEBAUTHN_ORIGIN || 'https://local.passwords.keremin.ru:3000';
  }
}

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç clientDataJSON –¥–ª—è WebAuthn
 */
export function validateWebAuthnClientData(
  clientDataJSON: string,
  expectedChallenge: string,
  expectedOrigin: string
): { isValid: boolean; error?: string } {
  try {
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º clientDataJSON
    const clientData = JSON.parse(Buffer.from(clientDataJSON, 'base64').toString());
    
    console.log('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è clientData:');
    console.log('  - type:', clientData.type);
    console.log('  - challenge:', clientData.challenge);
    console.log('  - origin:', clientData.origin);
    console.log('  - expectedChallenge:', expectedChallenge);
    console.log('  - expectedOrigin:', expectedOrigin);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
    if (clientData.type !== 'webauthn.get') {
      return {
        isValid: false,
        error: `–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: ${clientData.type}, –æ–∂–∏–¥–∞–ª—Å—è webauthn.get`
      };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º challenge
    if (clientData.challenge !== expectedChallenge) {
      return {
        isValid: false,
        error: `Challenge –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: –ø–æ–ª—É—á–µ–Ω ${clientData.challenge}, –æ–∂–∏–¥–∞–ª—Å—è ${expectedChallenge}`
      };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º origin
    if (clientData.origin !== expectedOrigin) {
      return {
        isValid: false,
        error: `Origin –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: –ø–æ–ª—É—á–µ–Ω ${clientData.origin}, –æ–∂–∏–¥–∞–ª—Å—è ${expectedOrigin}`
      };
    }
    
    return { isValid: true };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ clientData:', error);
    return {
      isValid: false,
      error: `–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ clientData: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
    };
  }
}

/**
 * –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å—å WebAuthn –∏—Å–ø–æ–ª—å–∑—É—è @simplewebauthn/server
 */
export async function verifyWebAuthnSignature(
  credentialId: string,
  authenticatorData: string,
  clientDataJSON: string,
  signature: string,
  expectedChallenge: string,
  credential: { publicKey: string; counter: number },
  expectedOrigin: string
): Promise<{ verified: boolean; authenticationInfo?: any; error?: string }> {
  try {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç base64url –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    const toBase64url = (base64: string): string => {
      return base64
        .replace(/\+/g, '-')
        .replace(/\//g, '_')
        .replace(/=/g, '');
    };

    const expectedRPID = process.env.WEBAUTHN_RP_ID || 'local.passwords.keremin.ru';

    console.log('üîÑ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º WebAuthn –ø–æ–¥–ø–∏—Å—å —Å @simplewebauthn/server...');
    console.log('  - credentialId –¥–ª–∏–Ω–∞:', credentialId.length);
    console.log('  - expectedOrigin:', expectedOrigin);
    console.log('  - expectedRPID:', expectedRPID);
    console.log('  - expectedChallenge:', expectedChallenge);
    console.log('  - credential counter:', credential.counter);

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const verification: VerifyAuthenticationResponseOpts = {
      response: {
        id: toBase64url(credentialId),
        rawId: toBase64url(credentialId),
        response: {
          authenticatorData: toBase64url(authenticatorData),
          clientDataJSON: toBase64url(clientDataJSON),
          signature: toBase64url(signature),
        },
        type: 'public-key',
        clientExtensionResults: {},
      },
      expectedChallenge: toBase64url(expectedChallenge),
      expectedOrigin,
      expectedRPID,
      credential: {
        id: credentialId,
        publicKey: new Uint8Array(Buffer.from(credential.publicKey, 'base64')),
        counter: credential.counter,
      },
      requireUserVerification: true,
    };

    const verificationResult = await verifyAuthenticationResponse(verification);
    
    if (verificationResult.verified) {
      console.log('‚úÖ WebAuthn –ø–æ–¥–ø–∏—Å—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      console.log('  - –Ω–æ–≤—ã–π counter:', verificationResult.authenticationInfo.newCounter);
      
      return {
        verified: true,
        authenticationInfo: verificationResult.authenticationInfo
      };
    } else {
      console.error('‚ùå WebAuthn –ø–æ–¥–ø–∏—Å—å –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é');
      return {
        verified: false,
        error: '–ü–æ–¥–ø–∏—Å—å WebAuthn –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é'
      };
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ WebAuthn –ø–æ–¥–ø–∏—Å–∏:', error);
    return {
      verified: false,
      error: `–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
    };
  }
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç SHA-256 —Ö–µ—à –æ—Ç –¥–∞–Ω–Ω—ã—Ö
 */
export function sha256(data: Buffer): Buffer {
  return createHash('sha256').update(data as any).digest();
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç base64 –≤ base64url
 */
export function base64ToBase64url(base64: string): string {
  return base64
    .replace(/\+/g, '-')
    .replace(/\//g, '_')
    .replace(/=/g, '');
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç base64url –≤ base64
 */
export function base64urlToBase64(base64url: string): string {
  // –î–æ–±–∞–≤–ª—è–µ–º padding –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
  let padded = base64url.replace(/-/g, '+').replace(/_/g, '/');
  const paddingNeeded = 4 - (padded.length % 4);
  if (paddingNeeded !== 4) {
    padded += '='.repeat(paddingNeeded);
  }
  return padded;
}
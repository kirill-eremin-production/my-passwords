import { verifyAuthenticationResponse } from '@simplewebauthn/server';
import type { 
  VerifyAuthenticationResponseOpts,
  VerifiedAuthenticationResponse 
} from '@simplewebauthn/server';
import { BiometricCredential } from '../types/biometric';

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç WebAuthn –ø–æ–¥–ø–∏—Å—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
export async function verifyWebAuthnSignature(
  credentialId: string,
  authenticatorData: string,
  clientDataJSON: string,
  signature: string,
  challenge: string,
  credential: BiometricCredential,
  expectedOrigin: string
): Promise<VerifiedAuthenticationResponse> {
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ base64 –≤ base64url
  const toBase64url = (base64: string): string => {
    return base64
      .replace(/\+/g, '-')
      .replace(/\//g, '_')
      .replace(/=/g, '');
  };
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ base64 –≤ base64url –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å @simplewebauthn/server
  const base64urlChallenge = toBase64url(challenge);
  const base64urlAuthenticatorData = toBase64url(authenticatorData);
  const base64urlClientDataJSON = toBase64url(clientDataJSON);
  const base64urlSignature = toBase64url(signature);
  const base64urlCredentialId = toBase64url(credentialId);
  
  console.log('üîç Base64 -> Base64url –∫–æ–Ω–≤–µ—Ä—Å–∏—è:');
  console.log('  - Challenge:', base64urlChallenge);
  console.log('  - AuthenticatorData:', base64urlAuthenticatorData.substring(0, 20) + '...');
  console.log('  - ClientDataJSON:', base64urlClientDataJSON.substring(0, 20) + '...');
  console.log('  - Signature:', base64urlSignature.substring(0, 20) + '...');
  console.log('  - CredentialId:', base64urlCredentialId);
  
  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const verification: VerifyAuthenticationResponseOpts = {
    response: {
      id: base64urlCredentialId,
      rawId: base64urlCredentialId,
      response: {
        authenticatorData: base64urlAuthenticatorData,
        clientDataJSON: base64urlClientDataJSON,
        signature: base64urlSignature,
      },
      type: 'public-key',
      clientExtensionResults: {},
    },
    expectedChallenge: base64urlChallenge,
    expectedOrigin,
    expectedRPID: process.env.WEBAUTHN_RP_ID || 'local.passwords.keremin.ru',
    credential: {
      id: credential.id,
      publicKey: new Uint8Array(Buffer.from(credential.publicKey, 'base64')),
      counter: credential.counter,
    },
    requireUserVerification: true,
  };

  return await verifyAuthenticationResponse(verification);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ WebAuthn
 */
export function validateWebAuthnClientData(
  clientDataJSON: string,
  expectedChallenge: string,
  expectedOrigin: string
): { isValid: boolean; error?: string } {
  try {
    const clientData = JSON.parse(Buffer.from(clientDataJSON, 'base64').toString());
    
    console.log('üîç –î–µ—Ç–∞–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ clientData:');
    console.log('  - clientData.type:', clientData.type);
    console.log('  - clientData.challenge:', clientData.challenge);
    console.log('  - expectedChallenge:', expectedChallenge);
    console.log('  - clientData.origin:', clientData.origin);
    console.log('  - expectedOrigin:', expectedOrigin);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
    if (clientData.type !== 'webauthn.get') {
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ WebAuthn');
      return { isValid: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ WebAuthn' };
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ challenge - –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å base64 vs base64url
    const clientChallenge = clientData.challenge;
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è challenge
    const challengeMatch = clientChallenge === expectedChallenge ||
                          clientChallenge === expectedChallenge.replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '') ||
                          clientChallenge.replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '') === expectedChallenge;
    
    if (!challengeMatch) {
      console.log('‚ùå Challenge –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç');
      console.log('  - –ü—Ä—è–º–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ:', clientChallenge === expectedChallenge);
      console.log('  - base64 vs base64url —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏');
      return { isValid: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π challenge' };
    }
    
    console.log('‚úÖ Challenge —Å–æ–≤–ø–∞–¥–∞–µ—Ç');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ origin
    if (clientData.origin !== expectedOrigin) {
      console.log('‚ùå Origin –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç');
      return { isValid: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π origin' };
    }
    
    console.log('‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ');
    return { isValid: true };
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ clientDataJSON:', error);
    return { isValid: false, error: '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ clientDataJSON' };
  }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç counter –∏–∑ authenticatorData
 */
export function extractCounterFromAuthenticatorData(authenticatorData: string): number {
  try {
    const authDataBuffer = Buffer.from(authenticatorData, 'base64');
    
    // Counter –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–∞–π—Ç–∞—Ö 33-36 (4 –±–∞–π—Ç–∞, big-endian)
    if (authDataBuffer.length < 37) {
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –¥–ª–∏–Ω–∞ authenticatorData');
    }
    
    return authDataBuffer.readUInt32BE(33);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è counter:', error);
    return -1;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–π origin –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */
export function getExpectedOrigin(): string {
  if (process.env.NODE_ENV === 'production') {
    return process.env.PRODUCTION_ORIGIN || 'https://passwords.keremin.ru';
  }
  return process.env.DEV_ORIGIN || 'https://local.passwords.keremin.ru:3001';
}
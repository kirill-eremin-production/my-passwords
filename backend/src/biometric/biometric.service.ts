import { Injectable } from '@nestjs/common';
import { randomBytes } from 'crypto';
import { verifyRegistrationResponse } from '@simplewebauthn/server';
import type { VerifyRegistrationResponseOpts } from '@simplewebauthn/server';

import { BiometricStoreService } from '../core/services/biometric-store.service';
import { SessionsStoreService } from '../core/services/sessions-store.service';
import { AuthService } from '../auth/auth.service';

import { BiometricRegistrationRequest, BiometricAuthenticationRequest } from '../types/biometric';
import { 
  extractCounterFromAuthenticatorData,
  getExpectedOrigin,
  validateWebAuthnClientData,
  verifyWebAuthnSignature,
} from '../utils/webauthn';

@Injectable()
export class BiometricService {
  constructor(
    private readonly biometricStore: BiometricStoreService,
    private readonly sessionsStore: SessionsStoreService,
    private readonly authService: AuthService,
  ) {}

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç challenge –¥–ª—è –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  generateChallenge(sessionId: string): string {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–∏–π challenge
    const challenge = randomBytes(32);
    const challengeBase64 = challenge.toString('base64');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º challenge –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    this.biometricStore.storeChallenge({
      sessionId,
      challenge: challengeBase64,
      createdAt: Date.now(),
    });

    console.log(`‚úÖ Challenge —Å–æ–∑–¥–∞–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏ ${sessionId}`);

    return challengeBase64;
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   * –¢—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
   */
  async registerBiometric(
    sessionId: string,
    registrationData: BiometricRegistrationRequest,
    userAgent?: string
  ): Promise<{ success: boolean; message: string }> {
    let currentSessionId = sessionId;
    const session = this.sessionsStore.getSession(sessionId);

    if (!session) {
      throw new Error('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∞–ª–∏–¥–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (!session.valid) {
      console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∞–ª–∏–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–∏–æ–º–µ—Ç—Ä–∏–∏');
      const newSessionId = this.authService.createNewSession();
      this.sessionsStore.validateSession(newSessionId);
      currentSessionId = newSessionId;
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≤–∞–ª–∏–¥–Ω–∞—è —Å–µ—Å—Å–∏—è ${newSessionId} –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–∏–æ–º–µ—Ç—Ä–∏–∏`);
    }

    const {
      credentialId,
      publicKey,
      authenticatorData,
      clientDataJSON,
      attestationObject,
    } = registrationData;

    if (!credentialId || !attestationObject || !clientDataJSON) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
    }

    try {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç base64url –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
      const toBase64url = (base64: string): string => {
        return base64
          .replace(/\+/g, '-')
          .replace(/\//g, '_')
          .replace(/=/g, '');
      };

      const expectedOrigin = getExpectedOrigin();
      const expectedRPID = process.env.WEBAUTHN_RP_ID || 'local.passwords.keremin.ru';

      // –ü–æ–ª—É—á–∞–µ–º challenge –∏–∑ clientDataJSON –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const clientData = JSON.parse(
        Buffer.from(clientDataJSON, 'base64').toString()
      );
      const challengeFromClient = clientData.challenge;

      console.log('üîç –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - challenge –∏–∑ clientData:', challengeFromClient);

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      const verification: VerifyRegistrationResponseOpts = {
        response: {
          id: toBase64url(credentialId),
          rawId: toBase64url(credentialId),
          response: {
            attestationObject: toBase64url(attestationObject),
            clientDataJSON: toBase64url(clientDataJSON),
          },
          type: 'public-key',
          clientExtensionResults: {},
        },
        expectedChallenge: toBase64url(challengeFromClient),
        expectedOrigin,
        expectedRPID,
        requireUserVerification: true,
      };

      console.log('üîÑ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å @simplewebauthn/server...');
      const verificationResult = await verifyRegistrationResponse(verification);

      if (!verificationResult.verified) {
        console.error('‚ùå –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–æ—à–ª–∞:', verificationResult);
        throw new Error('–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–∏–æ–º–µ—Ç—Ä–∏–∏');
      }

      console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å COSE –ø—É–±–ª–∏—á–Ω—ã–º –∫–ª—é—á–æ–º
      const biometricCredential = {
        id: credentialId,
        publicKey: Buffer.from(
          verificationResult.registrationInfo!.credential.publicKey
        ).toString('base64'),
        counter: verificationResult.registrationInfo!.credential.counter,
        createdAt: new Date().toISOString(),
        sessionId: currentSessionId,
        userAgent: userAgent,
      };

      console.log('üîÑ –°–æ—Ö—Ä–∞–Ω—è–µ–º credential —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º COSE –ø—É–±–ª–∏—á–Ω—ã–º –∫–ª—é—á–æ–º...');
      this.biometricStore.storeBiometricCredential(biometricCredential);

      return {
        success: true,
        message: '–ë–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã',
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      throw new Error(
        `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–∏–æ–º–µ—Ç—Ä–∏–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
      );
    }
  }

  /**
   * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async authenticateWithBiometric(
    sessionId: string,
    authData: BiometricAuthenticationRequest
  ): Promise<{ success: boolean; sessionId: string; valid: boolean; message: string }> {
    const { credentialId, authenticatorData, clientDataJSON, signature } = authData;

    if (!credentialId || !authenticatorData || !clientDataJSON || !signature) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
    }

    try {
      // –ù–∞—Ö–æ–¥–∏–º –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const credential = this.biometricStore.getBiometricCredentialById(credentialId);

      if (!credential) {
        throw new Error('–ë–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }

      // –ü–æ–ª—É—á–∞–µ–º challenge –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
      console.log('üîç –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è - sessionId:', sessionId);

      const challengeData = this.biometricStore.getChallengeBySessionId(sessionId);
      console.log('üîç Challenge –¥–ª—è —Å–µ—Å—Å–∏–∏:', challengeData);

      if (!challengeData) {
        console.log('‚ùå Challenge –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏:', sessionId);
        throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç challenge –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏');
      }

      const expectedOrigin = getExpectedOrigin();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ WebAuthn
      console.log('üîç –í–∞–ª–∏–¥–∏—Ä—É–µ–º clientData —Å challenge:', challengeData.challenge);
      const clientDataValidation = validateWebAuthnClientData(
        clientDataJSON,
        challengeData.challenge,
        expectedOrigin
      );

      if (!clientDataValidation.isValid) {
        console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è clientData –Ω–µ—É—Å–ø–µ—à–Ω–∞:', clientDataValidation.error);
        throw new Error(clientDataValidation.error);
      }
      console.log('‚úÖ clientData –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');

      // –ò–∑–≤–ª–µ–∫–∞–µ–º counter –∏–∑ authenticatorData –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ replay –∞—Ç–∞–∫
      const newCounter = extractCounterFromAuthenticatorData(authenticatorData);
      console.log('üîç Counter –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:');
      console.log('  - newCounter –∏–∑ authenticatorData:', newCounter);
      console.log('  - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π counter –≤ credential:', credential.counter);

      if (newCounter === -1) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è counter');
        throw new Error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è counter –∏–∑ authenticatorData');
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ counter –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç replay –∞—Ç–∞–∫
      if (newCounter < credential.counter) {
        console.warn(
          `‚ùå –í–æ–∑–º–æ–∂–Ω–∞—è replay –∞—Ç–∞–∫–∞: –Ω–æ–≤—ã–π counter (${newCounter}) < —Å—Ç–∞—Ä–æ–≥–æ (${credential.counter}) –¥–ª—è credential ${credentialId}`
        );
        throw new Error('–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–∞—è replay –∞—Ç–∞–∫–∞');
      }

      if (newCounter === credential.counter) {
        console.log(
          '‚ö†Ô∏è Counter –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤'
        );
      } else {
        console.log('‚úÖ Counter —É–≤–µ–ª–∏—á–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      }

      // –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê WEBAUTHN –ü–û–î–ü–ò–°–ò
      try {
        const verificationResult = await verifyWebAuthnSignature(
          credentialId,
          authenticatorData,
          clientDataJSON,
          signature,
          challengeData.challenge,
          credential,
          expectedOrigin
        );

        if (!verificationResult.verified) {
          console.error('WebAuthn signature verification failed:', verificationResult);
          throw new Error('–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å WebAuthn');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º counter –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        this.biometricStore.updateBiometricCredentialCounter(
          credentialId,
          verificationResult.authenticationInfo.newCounter
        );
      } catch (verificationError) {
        console.error('–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ WebAuthn:', verificationError);
        throw new Error('–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏ WebAuthn');
      }

      // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π challenge
      this.biometricStore.removeChallenge(sessionId);

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∞–ª–∏–¥–Ω—É—é —Å–µ—Å—Å–∏—é
      const newSessionId = this.authService.createNewSession();
      this.sessionsStore.validateSession(newSessionId);

      return {
        success: true,
        sessionId: newSessionId,
        valid: true,
        message: '–ë–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞',
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
      throw error;
    }
  }
}